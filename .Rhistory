1654-1317
quantile(df$Store_Area, 0.25)
quantile(df$Store_Area, 0.75)-quantile(df$Store_Area, 0.25)
quantile(df$Store_Area, probs=c(.25, .75), na.rm = na.rm, ...)
qnt <- quantile(df$Store_Area, probs=c(.25, .75), na.rm = na.rm, ...)
qnt <- quantile(df$Store_Area, probs=c(.25, .75), na.rm = na.rm)
qnt
quantile(df$Store_Area, probs=c(.25, .75), na.rm = na.rm)
quantile(df$Store_Area, probs=c(.25, .75), na.rm = T)
qnt <- quantile(df$Store_Area, probs=c(.25, .75), na.rm = T)
qnt
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
set.seed(1)
x <- rnorm(100)
x <- c(-10, x, 10)
y <- remove_outliers(x)
## png()
par(mfrow = c(1, 2))
boxplot(x)
boxplot(y)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
return(y)
}
set.seed(1)
x <- rnorm(100)
x <- c(-10, x, 10)
y <- remove_outliers(x)
## png()
par(mfrow = c(1, 2))
boxplot(x)
boxplot(y)
IQR(df$Store_Area)
#Função para remover os outliers
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
return(y)
}
remove_outliers(df[[col]])
remove_outliers <- function(df, na.rm = TRUE) {
df_clean <- df
for (col in names(df)) {
q1 <- quantile(df[[col]], 0.25, na.rm = na.rm)
q3 <- quantile(df[[col]], 0.75, na.rm = na.rm)
iqr <- q3 - q1
upper_limit <- q3 + 1.5*iqr
lower_limit <- q1 - 1.5*iqr
df_clean[[col]] <- df[[col]][df[[col]] >= lower_limit & df[[col]] <= upper_limit]
}
return(df_clean)
}
remove_outliers(df[['Store_Area']], na.rm = T)
remove_outliers <- function(df, na.rm = TRUE) {
df_clean <- df
for (col in names(df)) {
q1 <- quantile(df[[col]], 0.25, na.rm = na.rm)
q3 <- quantile(df[[col]], 0.75, na.rm = na.rm)
iqr <- q3 - q1
upper_limit <- q3 + 1.5*iqr
lower_limit <- q1 - 1.5*iqr
df_clean[[col]] <- df[[col]][df[[col]] >= lower_limit & df[[col]] <= upper_limit]
}
return(df_clean)
}
df_clean
names(df$Store_Area)
names(df[['Store_Area']])
q1 <- quantile(df[['Store_Area']], 0.25, na.rm = na.rm)
q1 <- quantile(df[['Store_Area']], 0.25, na.rm = T)
df_clean[['Store_Area']] <- df[['Store_Area']][df[['Store_Area']] >= lower_limit & df[['Store_Area']] <= upper_limit]
df_clean <- df
q1 <- quantile(df[['Store_Area']], 0.25, na.rm = T)
q3 <- quantile(df[['Store_Area']], 0.75, na.rm = T)
iqr <- q3 - q1
upper_limit <- q3 + 1.5*iqr
lower_limit <- q1 - 1.5*iqr
df_clean[['Store_Area']] <- df[['Store_Area']][df[['Store_Area']] >= lower_limit & df[['Store_Area']] <= upper_limit]
# Baixando e carregando pacotes
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","Rcpp","equatiomatic", 'data.table')
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
#Visualizando diretório
getwd()
#Carregando e visualizando os dados
df <- read.csv('Stores.csv')
glimpse(df)
dim(df) # Shape do nosso dataset
View(df)
#Transformando a Variável Id para char
df$Store.ID <- as.character(df$Store.ID)
summary(df)
#Verificando valores NA
sum(is.na(df)) # Não há valores NA
any(sapply(df, is.na)) # Outra maneira
#Valores duplicados
sum(duplicated(df)) # Não há observações duplicadas
any(duplicated(df)) # Outra maneira
#Transformar a coluna Store.ID no index do dataset
head(df)
df <- column_to_rownames(.data = df, var = 'Store.ID')
head(df)
View(df)
# Visualizando todas as variáveis por boxplot
par(mfrow = c(2,2))
boxplot(df$Store_Area, main='Store Area')
boxplot(df$Items_Available, main= 'Items Available')
boxplot(df$Daily_Customer_Count, main = 'Daily Customer Count')
boxplot(df$Store_Sales, main= 'Store Sales')
# Outra opção de visualização usando a função gather do pacote tidyr
df_long <- gather(data=df, key = 'Variaveis', value = 'Valores')
View(df_long)
ggplotly(
ggplot(data = df_long, aes(x=Variaveis, y = Valores)) +
geom_boxplot(aes(x = Variaveis, y = Valores), color = 'black', fill = 'darkgreen', outlier.color = 'red')+
labs(x= 'Variaveis', y = 'Valores', title = 'Boxplots de todas as variáveis do dataset')+
facet_wrap(facets = 'Variaveis', scale = 'free')
)
(df)
#Notou-se a presença de alguns poucos outliers. Irei remove-los usando o método da distancia interquartil (IQR)
summary(df)
df_clean <- df
q1 <- quantile(df[['Store_Area']], 0.25, na.rm = T)
q3 <- quantile(df[['Store_Area']], 0.75, na.rm = T)
iqr <- q3 - q1
upper_limit <- q3 + 1.5*iqr
lower_limit <- q1 - 1.5*iqr
df_clean[['Store_Area']] <- df[['Store_Area']][df[['Store_Area']] >= lower_limit & df[['Store_Area']] <= upper_limit]
df_clean[['Store_Area']] <- [df[['Store_Area']] >= lower_limit & df[['Store_Area']] <= upper_limit]
df_clean[['Store_Area']] <- df[['Store_Area']] >= lower_limit & df[['Store_Area']] <= upper_limit]
df_clean[['Store_Area']] <- (df[['Store_Area']] >= lower_limit & df[['Store_Area']] <= upper_limit)
remove_outlier(df)
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
# Função para remover os outliers
remove_outlier < - function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df < - df[!detect_outlier(df[[col]]), ]
}
clean_df
# retorna o dataset limpo
print("Outliers removidos")
print(clean_df)
}
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
# Baixando e carregando pacotes
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","Rcpp","equatiomatic", 'data.table')
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
#Visualizando diretório
getwd()
#Carregando e visualizando os dados
df <- read.csv('Stores.csv')
glimpse(df)
dim(df) # Shape do nosso dataset
View(df)
#Transformando a Variável Id para char
df$Store.ID <- as.character(df$Store.ID)
summary(df)
#Verificando valores NA
sum(is.na(df)) # Não há valores NA
any(sapply(df, is.na)) # Outra maneira
#Valores duplicados
sum(duplicated(df)) # Não há observações duplicadas
any(duplicated(df)) # Outra maneira
#Transformar a coluna Store.ID no index do dataset
head(df)
df <- column_to_rownames(.data = df, var = 'Store.ID')
head(df)
View(df)
# Visualizando todas as variáveis por boxplot
par(mfrow = c(2,2))
boxplot(df$Store_Area, main='Store Area')
boxplot(df$Items_Available, main= 'Items Available')
boxplot(df$Daily_Customer_Count, main = 'Daily Customer Count')
boxplot(df$Store_Sales, main= 'Store Sales')
# Outra opção de visualização usando a função gather do pacote tidyr
df_long <- gather(data=df, key = 'Variaveis', value = 'Valores')
View(df_long)
ggplotly(
ggplot(data = df_long, aes(x=Variaveis, y = Valores)) +
geom_boxplot(aes(x = Variaveis, y = Valores), color = 'black', fill = 'darkgreen', outlier.color = 'red')+
labs(x= 'Variaveis', y = 'Valores', title = 'Boxplots de todas as variáveis do dataset')+
facet_wrap(facets = 'Variaveis', scale = 'free')
)
#Notou-se a presença de alguns poucos outliers. Irei remove-los usando o método da distancia interquartil (IQR)
summary(df)
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
#Função para detectar os outliers
detectar_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
detect_outliers <- NULL
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=.25)
# terceiro quartil
q3 < - quantile(x, probs=.75)
# calculate inter quartile range
IQR = q3-a1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
print('hi')
detect_outliers <- function(x) {
print('hi')
}
detect_outliers()
ct_outlier
#Função para detectar os outliers
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=0.25)
# terceiro quartil
q3 < - quantile(x, probs=0.75)
# calculate inter quartile range
IQR = q3-q1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=0.25)
# terceiro quartil
q3 < - quantile(x, probs=0.75)
# calculate inter quartile range
IQR = q3-q1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
detect_outlier < - function(x) {
# Primeiro quartil
q1 < - quantile(x, probs=0.25)
# terceiro quartil
q3 < - quantile(x, probs=0.75)
# calculate inter quartile range
IQR = q3-q1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
print('hi')
detect_outlier < - function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=0.25)
# terceiro quartil
q3 < - quantile(x, probs=0.75)
# calculate inter quartile range
IQR = q3-q1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
print('hi')
}
#Função para detectar os outliers
detect_outlier <-  function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 < - quantile(x, probs=0.25)
# terceiro quartil
q3 < - quantile(x, probs=0.75)
# calculate inter quartile range
IQR = q3-q1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
# Função para remover os outliers
remove_outlier < - function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df < - df[!detect_outlier(df[[col]]), ]
}
clean_df
# retorna o dataset limpo
print("Outliers removidos")
print(clean_df)
}
# Função para remover os outliers
remove_outlier <-  function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df < - df[!detect_outlier(df[[col]]), ]
}
clean_df
# retorna o dataset limpo
print("Outliers removidos")
print(clean_df)
}
remove_outlier(df)
#Função para detectar os outliers
detect_outlier <-  function(x) { # x vai ser os valores de uma coluna
# Primeiro quartil
q1 <-  quantile(x, probs=0.25)
# terceiro quartil
q3 <-  quantile(x, probs=0.75)
# calculate inter quartile range
IQR = q3-q1
# retorna true or false
x > q3 + (IQR*1.5) | x < q1 - (IQR*1.5)
}
# Função para remover os outliers
remove_outlier <-  function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df <-  df[!detect_outlier(df[[col]]), ]
}
clean_df
# retorna o dataset limpo
print("Outliers removidos")
print(clean_df)
}
remove_outlier(df)
# Função para remover os outliers
remove_outlier <-  function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df <-  df[!detect_outlier(df[[col]]), ]
}
clean_df <- df
# retorna o dataset limpo
print("Outliers removidos")
print(clean_df)
}
remove_outlier(df)
sort(df$Daily_Customer_Count, partial = 1:1)[1]
sort(df$Daily_Customer_Count, partial = 1:1)[-1]
# Função para remover os outliers
remove_outlier <-  function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df <-  df[!detect_outlier(df[[col]]), ]
}
clean_df <- df
# retorna o dataset limpo
print("Outliers removidos")
print(clean_df)
}
# Aplicando a função no dataset
remove_outlier(df)
# Função para remover os outliers
remove_outlier <-  function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df <-  df[!detect_outlier(df[[col]]), ]
}
clean_df <- df
# retorna o dataset limpo
print("Outliers removidos")
return(clean_df)
}
# Aplicando a função no dataset
remove_outlier(df)
sort(df$Daily_Customer_Count, partial = 1:1)
sort(df$Daily_Customer_Count, partial = 1:1)[1:1]
sort(clean_df$Daily_Customer_Count, partial = 1:1)[1:1]
remove_outlier <-  function(df,
columns=names(df)) {
# looping nas variáveis do dataset
for (col in columns) {
# remove observaçoes que foram consideradas outliers pela funçãao criada previamente
df <-  df[!detect_outlier(df[[col]]), ]
}
clean_df <- df
# retorna o dataset limpo
print("Outliers removidos")
return(clean_df)
}
# Aplicando a função no dataset
clean_df <- remove_outlier(df)
sort(clean_df$Daily_Customer_Count, partial = 1:1)[1:1]
ggplotly(
ggplot(data = df_long, aes(x=Variaveis, y = Valores)) +
geom_boxplot(aes(x = Variaveis, y = Valores), color = 'black', fill = 'darkgreen', outlier.color = 'red')+
labs(x= 'Variaveis', y = 'Valores', title = 'Boxplots de todas as variáveis do dataset')+
facet_wrap(facets = 'Variaveis', scale = 'free')
)
# Verificando o plot do novo dataset
clean_df_long <- gather(clean_df, key = 'Variaveis', value = 'Valores')
ggplotly(
ggplot(data = clean_df_long, aes(x=Variaveis, y = Valores)) +
geom_boxplot(aes(x = Variaveis, y = Valores), color = 'black', fill = 'darkgreen', outlier.color = 'red')+
labs(x= 'Variaveis', y = 'Valores', title = 'Boxplots de todas as variáveis do dataset')+
facet_wrap(facets = 'Variaveis', scale = 'free')
)
